# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
commands:
  print_pipeline_id:
    description: "A very simple command to print workflow id"
    parameters:
      user_name:
        type: "string"
        default: "Geordie Quiroa"
    steps:
      - run: echo ${CIRCLE_WORKFLOW_ID} by << parameters.user_name >>
jobs:
  save_hello_world_output:
    docker:
      - image: circleci/node:12.16.1
    steps:
      - run: echo "Hello world $user" > ~/output.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - output.txt
  print_output_file:
    docker:
      - image: circleci/node:12.16.1
    steps:
      - attach_workspace:
          at: ~/
      - run: cat ~/output.txt
      - print_pipeline_id:
          user_name: $user
  fail_on_purpose:
    docker:
      - image: circleci/node:12.16.1
    steps:
      - run: return 1
      - run:
          name: On error
          command: echo "Hello Error!"
          when: on_fail
  print_hello:
    docker:
      - image: circleci/node:12.16.1
    steps:
      - run: echo "Hello"
  print_world:
    docker:
      - image: circleci/node:12.16.1
    steps:
      - run: echo "world"
  print_user:
    docker:
      - image: circleci/node:12.16.1
    steps:
      - checkout
      - run:
          name: "echo an env variable in console"
          command: |
            echo $user
workflows:
  # Name the workflow "welcome"
  custom_workflow:
    # Run the welcome/run job in its own container
    jobs:
      #- print_hello
      # - print_world:
      #     requires:
      #       - print_hello
      # - print_user:
      #     requires:
      #       - print_world
      - save_hello_world_output
      - print_output_file:
          requires:
            - save_hello_world_output
      - fail_on_purpose
